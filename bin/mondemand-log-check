#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

my $prog_id_opt = undef;
my $dry_run_opt = 0;
my $log_root_opt = undef;
my @logs = ();
my $match_opt = undef;
my $key_opt = undef;
my $help_opt = 0;

GetOptions (
            "prog_id=s"    => \$prog_id_opt,
            "dry-run|n"    => \$dry_run_opt,
            "logdir=s"     => \$log_root_opt,
            "log=s"        => \@logs,
            "match=s"      => \$match_opt,
            "key=s"        => \$key_opt,
            'help'         => \$help_opt) or pod2usage (1);
pod2usage (1) if ($help_opt);

@logs = split (/,/, join (',', @logs));

unless (defined ($log_root_opt))
  {
    print STDERR "ERROR: log root must be defined use '--logdir'\n";
    exit 1;
  }
unless (defined ($prog_id_opt))
  {
    print STDERR "ERROR: prog id must be defined use '--prog_id'\n";
    exit 1;
  }
unless (scalar (@logs) > 0)
  {
    print STDERR "ERROR: must define at least one log use '--log'\n";
    exit 1;
  }
unless (defined ($match_opt))
  {
    print STDERR "ERROR: must define a match use '--match'\n";
    exit 1;
  }
unless (defined ($key_opt))
  {
    print STDERR "ERROR: must define a key use '--key'\n";
    exit 1;
  }

# sleep just a bit to make sure files have been rotated, etc
sleep 2;

# not get the time for last minute
my $now = time;
my $last_minute = $now - 60;

my (undef, $l_min, $l_hour, $l_mday, $l_mon, $l_year) =
   localtime ($last_minute);
$l_year += 1900;
$l_mon += 1;

# then get a date to match from
my $cass_date_fmt = "%04d-%02d-%02d %02d:%02d";
my $match_date =
   sprintf "$cass_date_fmt", $l_year, $l_mon, $l_mday, $l_hour, $l_min ;

my $missing_log = 0;
my $match_count = 0;
foreach my $log_to_check (@logs)
  {
    my $log_path = $log_root_opt."/".$log_to_check;
    if (! -f $log_path)
      {
        $missing_log = 1;
      }
    else
      {
        open FH, "< $log_path";
        while (my $line = <FH>)
          {
            if ($line =~ m/$match_date/)
              {
                if ($line =~ m/$match_opt/)
                  {
                    $match_count++;
                  }
              }
          }
        close FH;
      }
  }

# output the value
my $args = "-p $prog_id_opt "
          ."-o ".read_mondemand_config()." "
          ."-c ".host_context()." "
          ."-s gauge:missing_log:$missing_log "
          ."-s gauge:$key_opt:$match_count ";

my $cmd = "mondemand-tool $args";

if ($dry_run_opt) {
  print "$cmd\n";
} else {
  system $cmd;
}

sub read_mondemand_config {
  my $file = "/etc/mondemand/mondemand.conf";
  my ($addr, $port, $ttl);
  open (my $fh, "<", $file ) or die "can't open : $!";
  while (my $line = <$fh>) {
    chomp $line;
    if ($line =~ m/MONDEMAND_ADDR="([0-9\.]+)"/) {
      $addr = $1;
    } elsif ($line =~ m/MONDEMAND_PORT="([0-9]+)"/) {
      $port = $1;
    } elsif ($line =~ m/MONDEMAND_TTL="([0-9]+)"/) {
      $ttl = $1;
    }
  }
  close ($fh);
  die "can't parse : $!" if (! defined $addr and ! defined $port);
  if (defined $ttl) {
    return "lwes::$addr:$port:$ttl";
  } else {
    return "lwes::$addr:$port";
  }
}

sub host_context {
  my $host=`hostname -s`;
  chomp $host;
  return "host:$host";
}

0;
