#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

my $mondemand_config = "/etc/mondemand/mondemand.conf";
my $sock_file = undef;
my $prog_id_opt = undef;
my $dry_run_opt = 0;
my $help_opt= 0;

GetOptions ('sock_file=s' => \$sock_file,
            "prog_id=s" => \$prog_id_opt,
            "dry-run|n" => \$dry_run_opt,
            'help' => \$help_opt) or pod2usage (1);
pod2usage (1) if ($help_opt);

unless (defined ($prog_id_opt)) {
  print STDERR "ERROR: prog id must be defined use '--prog_id'\n";
  exit 1;
}

unless (defined ($sock_file)) {
  print STDERR "ERROR: must specify a unix domain socket filepath\n";
  exit (1);
}

my $stats = sample($sock_file);

my $args = "-p $prog_id_opt "
          ."-o ".read_mondemand_config($mondemand_config)." "
          ."-c ".host_context()." "
          .$stats;

my $cmd = "mondemand-tool $args";

if ($dry_run_opt) {
  print "$cmd\n";
} else {
  system $cmd;
}



0;

sub sample {
  my ($s) = @_;
  my $out = "";
  my @out = `echo STATS | nc -U $s`;
  foreach my $line (@out) {
    chomp $line;
    # lines with numbers tell number to keep reading
    # Example: 9 Statistics follow
    next if ($line =~ /^\d/);
    if ($line =~ /^([^:]+):\s+(\d+)$/) {
      my $metric = $1;
      my $value = $2;
      my $type = "counter";
      if ($metric eq "QueueLength"
          or $metric eq "TreeDepth"
          or $metric eq "TreeNodesNumber") {
        $type = "gauge";
      }
      $out .= "-s $type:$metric:$value ";
    }
  }
  return $out;
}

sub read_mondemand_config {
  my ($file) = @_;
  my ($addr, $port, $ttl);
  open (my $fh, "<", $file) or die "can't open : $!";
  while (my $line = <$fh>) {
    chomp $line;
    if ($line =~ m/MONDEMAND_ADDR="([0-9\.]+)"/) {
      $addr = $1;
    } elsif ($line =~ m/MONDEMAND_PORT="([0-9]+)"/) {
      $port = $1;
    } elsif ($line =~ m/MONDEMAND_TTL="([0-9]+)"/) {
      $ttl = $1;
    }
  }
  close ($fh);
  die "can't parse : $!" if (! defined $addr and ! defined $port);
  if (defined $ttl) {
    return "lwes::$addr:$port:$ttl";
  } else {
    return "lwes::$addr:$port";
  }
}

sub host_context {
  my $host=`hostname -s`;
  chomp $host;
  return "host:$host";
}

__END__

=head1 NAME

mondemand-from-rrdcached - gather rrdcached stats and pass to mondemand

=head1 SYNOPSIS

mondemand-from-rrdcached --sock_file=<unix domain socket filepath> [options]

 Options:
   -sock_file <unix domain socket filepath>
   -dry-run

=head1 OPTIONS

=over 8

=item B<--sock_file>

The Unix Domain Socket which rrdcached listens on.

=item B<--dry-run>

Show what will be sent to mondemand without sending

=back

=head1 DESCRIPTION

This will connect to the unix domain socket used for communicating with
rrdcached and run the 'STATS' command using 'nc'.  It will then parse
the output and send it to mondemand.

The expectation is this is run in cron once a minute.

=cut
